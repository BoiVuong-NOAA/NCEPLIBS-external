cmake_minimum_required(VERSION 3.12)
enable_language(Fortran)

project(NCEPLIBS-external)

if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set (CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/install" CACHE PATH "default install path" FORCE )
endif()

# CMP0074: find_package uses PackageName_ROOT variables
if(POLICY CMP0074)
  cmake_policy(SET CMP0074 NEW)
endif(POLICY CMP0074)

option(BUILD_ESMF "Build ESMF?" ON)
option(BUILD_NETCDF "Build NetCDF?" ON)
option(BUILD_JASPER "Build Jasper?" ON)
option(BUILD_PNG "Build libpng?" ON)
option(BUILD_JPEG "Build libjpeg?" ON)
option(BUILD_WGRIB2 "Build wgrib2?" ON)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

set(libs "NETCDF" "ESMF" "JASPER" "PNG" "JPEG" "WGRIB2")
set(libs_to_build)
foreach(lib ${libs})
  if(BUILD_${lib})
    list(APPEND libs_to_build "${lib} ")
  endif()
endforeach()

message(STATUS "Building libraries: " ${libs_to_build})

set(MPI_DETERMINE_LIBRARY_VERSION true)
find_package(MPI REQUIRED)

if(NOT DEFINED MPITYPE AND BUILD_ESMF)
  if(MPI_C_LIBRARY_VERSION_STRING MATCHES ".*MPICH.*" AND MPI_C_VERSION_MAJOR MATCHES "3")
    set(MPITYPE "mpich3")
  elseif(MPI_C_LIBRARY_VERSION_STRING MATCHES ".*Open MPI.*" AND MPI_C_VERSION_MAJOR MATCHES "3")
    set(MPITYPE "openmpi")
  elseif(MPI_C_LIBRARY_VERSION_STRING MATCHES ".*HPE MPT.*" AND MPI_C_VERSION_MAJOR MATCHES "3")
    set(MPITYPE "mpt")
  elseif(MPI_C_LIBRARY_VERSION_STRING MATCHES ".*Intel.*" AND MPI_C_VERSION_MAJOR MATCHES "3")
    set(MPITYPE "intelmpi")
  else()
    message(FATAL_ERROR "Cannot detect MPI type for ESMF, check that it is supported and set it via -DMPITYPE=... ; calid options are: intelmpi, openmpi, mpich3, mpt, openmpi")
  endif()
  message(STATUS "Set ESMF MPITYPE to ${MPITYPE}")
endif()

set(install_path ${CMAKE_INSTALL_PREFIX})

include(ExternalProject)
include(GNUInstallDirs)

if(BUILD_NETCDF OR BUILD_PNG)
  ExternalProject_Add(zlib
    PREFIX ${PROJECT_BINARY_DIR}/zlib
    CMAKE_ARGS
    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
    -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
    -DCMAKE_BUILD_TYPE=RELEASE
    SOURCE_DIR ${PROJECT_SOURCE_DIR}/zlib
    INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
    )
endif()

if(BUILD_NETCDF)
  # This is where the libraries will be
  set(NETCDF_INCLUDES ${CMAKE_INSTALL_PREFIX}/include)
  set(NETCDF_LIBRARIES_C ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/${CMAKE_SHARED_LIBRARY_PREFIX}netcdf${CMAKE_SHARED_LIBRARY_SUFFIX})
  set(NETCDF_LIBRARIES_Fortran ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/${CMAKE_SHARED_LIBRARY_PREFIX}netcdff${CMAKE_SHARED_LIBRARY_SUFFIX})
  set(NETCDF_LIBRARIES "${NETCDF_LIBRARIES_Fortran} ${NETCDF_LIBRARIES_C}")

  ExternalProject_Add(hdf5
    PREFIX ${PROJECT_BINARY_DIR}/hdf5
    CMAKE_ARGS
    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
    -DCMAKE_CXX_COMPILER=${MPI_CXX_COMPILER}
    -DCMAKE_C_COMPILER=${MPI_C_COMPILER}
    -DCMAKE_Fortran_COMPILER=${MPI_Fortran_COMPILER}
    -DHDF5_BUILD_FORTRAN:BOOL=ON
    -DHDF5_BUILD_HL_LIB:BOOL=ON
    -DHDF5_ENABLE_Z_LIB_SUPPORT:BOOL=ON
    -DZLIB_ROOT=${CMAKE_INSTALL_PREFIX}
    -DHDF5_ENABLE_SZIP_SUPPORT:BOOL=OFF
    -DCMAKE_BUILD_TYPE=RELEASE
    SOURCE_DIR ${PROJECT_SOURCE_DIR}/hdf5
    INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
    )

  ExternalProject_Add(netcdf
    PREFIX ${PROJECT_BINARY_DIR}/netcdf
    CMAKE_ARGS
    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
    -DCMAKE_CXX_COMPILER=${MPI_CXX_COMPILER}
    -DCMAKE_C_COMPILER=${MPI_C_COMPILER}
    -DHDF5_DIR=${CMAKE_INSTALL_PREFIX}
    -DCMAKE_BUILD_TYPE=RELEASE
    -DENABLE_DAP=OFF
    SOURCE_DIR ${PROJECT_SOURCE_DIR}/netcdf-c
    INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
    DEPENDS hdf5
    DEPENDS zlib
    )

  ExternalProject_Add(netcdf-fortran
    PREFIX ${PROJECT_BINARY_DIR}/netcdf-fortran
    CMAKE_ARGS
    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
    -DCMAKE_CXX_COMPILER=${MPI_CXX_COMPILER}
    -DCMAKE_C_COMPILER=${MPI_C_COMPILER}
    -DCMAKE_Fortran_COMPILER=${MPI_Fortran_COMPILER}
    -DENABLE_TESTS=OFF
    -DNETCDF_C_LIBRARY=${NETCDF_LIBRARIES_C}
    -DNETCDF_INCLUDE_DIR=${CMAKE_INSTALL_PREFIX}/include
    -DCMAKE_BUILD_TYPE=RELEASE
    SOURCE_DIR ${PROJECT_SOURCE_DIR}/netcdf-fortran
    INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
    DEPENDS netcdf
    )
endif()

if(BUILD_PNG)
  ExternalProject_Add(libpng
    PREFIX ${PROJECT_BINARY_DIR}/libpng
    CMAKE_ARGS
    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
    -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
    -DZLIB_ROOT=${CMAKE_INSTALL_PREFIX}
    -DCMAKE_BUILD_TYPE=RELEASE
    SOURCE_DIR ${PROJECT_SOURCE_DIR}/libpng
    INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
    DEPENDS zlib
    )
endif()

if(BUILD_JPEG OR BUILD_JASPER)
   ExternalProject_Add(libjpeg
    PREFIX ${PROJECT_BINARY_DIR}/libpng
    CMAKE_ARGS
    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
    -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
    -DCMAKE_BUILD_TYPE=RELEASE
    SOURCE_DIR ${PROJECT_SOURCE_DIR}/libjpeg
    INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
    )
endif()

if(BUILD_JASPER)
  ExternalProject_Add(jasper
    PREFIX ${PROJECT_BINARY_DIR}/jasper
    CMAKE_ARGS
    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
    -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
    -DCMAKE_BUILD_TYPE=RELEASE
    -DJAS_ENABLE_DOC=FALSE
    SOURCE_DIR ${PROJECT_SOURCE_DIR}/jasper
    INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
    DEPENDS libjpeg
    )
endif()

if(BUILD_WGRIB2)
  if(${CMAKE_C_COMPILER_ID} STREQUAL "Intel")
    set(COMP_SYS intel_linux)
  elseif(${CMAKE_C_COMPILER_ID} STREQUAL "GNU")
    set(COMP_SYS gnu_linux)
  elseif(${CMAKE_C_COMPILER_ID} STREQUAL "Clang")
    set(COMP_SYS clang_linux)
  else()
    message(FATAL_ERROR "Unknown compiler, cannot configure wgrib2")
  endif()

  ExternalProject_Add(wgrib2
    PREFIX ${PROJECT_BINARY_DIR}/wgrib2
    SOURCE_DIR ${PROJECT_SOURCE_DIR}/wgrib2
    INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
    BUILD_IN_SOURCE 1
    CONFIGURE_COMMAND cd ${PROJECT_BINARY_DIR}/wgrib2 && ${PROJECT_SOURCE_DIR}/wgrib2/extract_and_configure.sh ${PROJECT_SOURCE_DIR}/wgrib2
    BUILD_COMMAND cd ${PROJECT_BINARY_DIR}/wgrib2/grib2 && CC=${CMAKE_C_COMPILER} FC=${CMAKE_Fortran_COMPILER} COMP_SYS=${COMP_SYS} $(MAKE) lib
    INSTALL_COMMAND cd ${PROJECT_BINARY_DIR}/wgrib2/grib2 && ${PROJECT_SOURCE_DIR}/wgrib2/install.sh ${CMAKE_INSTALL_PREFIX}
    )
endif()

if(BUILD_ESMF)
  if(${CMAKE_C_COMPILER_ID} STREQUAL "Intel")
    set(comp "intel")
  elseif(${CMAKE_C_COMPILER_ID} STREQUAL "GNU")
    set(comp "gfortran")
  endif()

  if(NOT BUILD_NETCDF)
    add_custom_target(netcdf-fortran)
    find_package(NetCDF REQUIRED)
  endif()

  ExternalProject_Add(esmf
    PREFIX ${PROJECT_BINARY_DIR}/esmf
    SOURCE_DIR ${PROJECT_SOURCE_DIR}/esmf
    INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
    BUILD_IN_SOURCE 1
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ${CMAKE_COMMAND} -E env ESMF_DIR=${PROJECT_SOURCE_DIR}/esmf ESMF_COMM=${MPITYPE} ESMF_COMPILER=${comp} ESMF_NETCDF=1 ESMF_NETCDF_INCLUDE=${NETCDF_INCLUDES} ESMF_NETCDF_LIBS=${NETCDF_LIBRARIES} ESMF_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} $(MAKE)
    INSTALL_COMMAND ${CMAKE_COMMAND} -E env ESMF_DIR=${PROJECT_SOURCE_DIR}/esmf ESMF_COMM=${MPITYPE} ESMF_COMPILER=${comp} ESMF_NETCDF=1 ESMF_NETCDF_INCLUDE=${NETCDF_INCLUDES} ESMF_NETCDF_LIBS=${NETCDF_LIBRARIES} ESMF_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} ESMF_INSTALL_HEADERDIR=${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR} ESMF_INSTALL_MODDIR=${CMAKE_INSTALL_PREFIX}/mod ESMF_INSTALL_LIBDIR=${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR} ESMF_INSTALL_BINDIR=${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR} $(MAKE) install
    DEPENDS netcdf-fortran)
endif()
